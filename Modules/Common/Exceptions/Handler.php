<?php

namespace Modules\Common\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Throwable;
use Modules\Common\Exceptions\ApiException;
use BadMethodCallException;
use Error;
use ParseError;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Database\QueryException;


class Handler extends ExceptionHandler
{
    private $status = 0;
    private $message = '';
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    private function setErrorException($e)
    {

        if ($e instanceof BadMethodCallException) {
            $this->status = StatusData::BAD_METHOD_CALL_EXCEPTION;
            $this->message = MessageData::Error;
        } else if ($e instanceof Error) {
            $this->status = StatusData::Error;
            $this->message = MessageData::Error;
        } else if ($e instanceof ParseError) {
            $this->status = StatusData::PARES_ERROR;
            $this->message = MessageData::PARES_ERROR;
        } else if ($e instanceof \ReflectionException) {
            $this->status = StatusData::REFLECTION_EXCEPTION;
            $this->message = MessageData::REFLECTION_EXCEPTION;
        } else if ($e instanceof \RuntimeException) {
            $this->status = StatusData::RUNTIME_EXCEPTION;
            $this->message = MessageData::RUNTIME_EXCEPTION;
        } else if ($e instanceof \ErrorException) {
            $this->status = StatusData::ERROR_EXCEPTION;
            $this->message = MessageData::ERROR_EXCEPTION;
        } else if ($e instanceof \InvalidArgumentException) {
            $this->status = StatusData::INVALID_ARGUMENT_EXCEPTION;
            $this->message = MessageData::INVALID_ARGUMENT_EXCEPTION;
        } else if ($e instanceof ModelNotFoundException) {
            $this->status = StatusData::MODEL_NOT_FOUND_EXCEPTION;
            $this->message = MessageData::MODEL_NOT_FOUND_EXCEPTION;
        } else if ($e instanceof QueryException) {
            $this->status = StatusData::QUERY_EXCEPTION;
            $this->message = MessageData::QUERY_EXCEPTION;
        }
    }


    public function render($request, Throwable $e)
    {
        if ($request->is("api/*")) {
            if ($e instanceof ApiException) {
                $result = [
                    "status" => $e->getCode(),
                    "message" => $e->getMessage(),
                ];
                //return response()->json($result, CodeData::INTERNAL_SERVER_ERROR);
                return response()->json($result, CodeData::OK);
                exit();
            } else if ($e instanceof ValidationException) {
                $result = [
                    "status" => StatusData::BAD_REQUEST,
                    "message" => array_values($e->errors())[0][0]
                ];
                return response()->json($result, CodeData::OK);
                exit();
            }
            if (env("APP_DEBUG")) {
                $this->setErrorException($e);
                if ($this->status) {
                    $data = [
                        "file" => $e->getFile(),
                        "line" => $e->getLine(),
                        "trace" => $e->getTrace()
                    ];
                    if ($this->status == StatusData::MODEL_NOT_FOUND_EXCEPTION) {
                        $data['message'] = $e->getModel();
                    } else {
                        $data['message'] = $e->getMessage();
                    }
                    return response()->json([
                        "status" => $this->status,
                        "message" => env("APP_DEBUG") ? $this->message : MessageData::COMMON_EXCEPTION,
                        "data" => $data,
                    ], CodeData::INTERNAL_SERVER_ERROR);
                    exit();
                }
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
